// Generated by LiveScript 1.5.0
(function(){
  var convert_terminal_char_to_strokes, convert_to_strokes, merge_chars, is_character_valid, return_invalid_characters, display_lines, text_changed, main;
  convert_terminal_char_to_strokes = function(char){
    var output, i$, ref$, len$, x, special;
    output = [];
    if (char_to_strokes[char] != null) {
      for (i$ = 0, len$ = (ref$ = char_to_strokes[char]).length; i$ < len$; ++i$) {
        x = ref$[i$];
        output.push(x);
      }
    }
    special = {
      's': ['s'],
      'h': ['h'],
      'n': ['n'],
      'p': ['p'],
      'z': ['z'],
      '手': ['hzh', 'hsh'],
      '食': ['pzz'],
      '言': ['nz'],
      '心': ['nsn', 'nns'],
      '金': ['phhhz'],
      '人': ['ps'],
      '耳': ['zzs', 'zs'],
      '水': ['nnn', 'nnh'],
      '冰': ['nh'],
      '衣': ['nhpspn', 'nzspn'],
      '示': ['nhpsn', 'nzsn']
    };
    if (special[char] != null) {
      for (i$ = 0, len$ = (ref$ = special[char]).length; i$ < len$; ++i$) {
        x = ref$[i$];
        output.push(x);
      }
    }
    return output;
  };
  convert_to_strokes = function(char_list){
    var next_char, output, i$, ref$, len$, strokes, current_char_strokes, j$, ref1$, len1$, remaining_strokes;
    if (char_list.length === 0) {
      return [];
    }
    next_char = char_list[0];
    if (char_list.length === 1) {
      return convert_terminal_char_to_strokes(next_char);
    }
    if ('hspnz'.includes(next_char)) {
      output = [];
      for (i$ = 0, len$ = (ref$ = convert_to_strokes(char_list.substr(1))).length; i$ < len$; ++i$) {
        strokes = ref$[i$];
        output.push(next_char + strokes);
      }
      return output;
    }
    output = [];
    for (i$ = 0, len$ = (ref$ = convert_terminal_char_to_strokes(next_char)).length; i$ < len$; ++i$) {
      current_char_strokes = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = convert_to_strokes(char_list.substr(1))).length; j$ < len1$; ++j$) {
        remaining_strokes = ref1$[j$];
        output.push(current_char_strokes + remaining_strokes);
      }
    }
    return output;
  };
  merge_chars = function(char_list){
    var output, output_set, i$, ref$, len$, strokes, j$, ref1$, len1$, char;
    output = [];
    output_set = new Set();
    for (i$ = 0, len$ = (ref$ = convert_to_strokes(char_list)).length; i$ < len$; ++i$) {
      strokes = ref$[i$];
      if (strokes_to_char[strokes] == null) {
        continue;
      }
      for (j$ = 0, len1$ = (ref1$ = strokes_to_char[strokes]).length; j$ < len1$; ++j$) {
        char = ref1$[j$];
        if (output_set.has(char)) {
          continue;
        }
        output_set.add(char);
        output.push(char);
      }
    }
    return output;
  };
  is_character_valid = function(char){
    if ('hspnz'.includes(char)) {
      return true;
    }
    if (char_to_strokes[char] != null) {
      return true;
    }
    return false;
  };
  return_invalid_characters = function(chars){
    var i$, len$, x;
    for (i$ = 0, len$ = chars.length; i$ < len$; ++i$) {
      x = chars[i$];
      if (!is_character_valid(x)) {
        return x;
      }
    }
    return '';
  };
  display_lines = function(lines){
    var display, i$, len$, x, results$ = [];
    display = $('#display');
    display.html('');
    for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
      x = lines[i$];
      results$.push(display.append($('<div>').text(x)));
    }
    return results$;
  };
  text_changed = function(){
    var newtext, invalid_charaters, output, i$, ref$, len$, x;
    newtext = document.querySelector('#textinput').value;
    invalid_charaters = return_invalid_characters(newtext);
    console.log('invalid characters are ' + invalid_charaters);
    if (invalid_charaters.length > 0) {
      display_lines(['invalid character ' + invalid_charaters]);
      return;
    }
    console.log('new text is ' + newtext);
    output = [];
    for (i$ = 0, len$ = (ref$ = merge_chars(newtext)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      output.push(x + ' ' + convert_terminal_char_to_strokes(x).join(' '));
    }
    return display_lines(output);
  };
  main = function(){
    return document.addEventListener('DOMContentLoaded', function(){
      var textinput;
      textinput = document.querySelector('#textinput');
      textinput.onchange = text_changed;
      return textinput.onkeyup = text_changed;
    });
  };
  main();
}).call(this);
